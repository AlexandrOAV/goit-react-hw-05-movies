{"version":3,"file":"static/js/39.46aa7e40.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-05-movies/./src/components/DatailsMovie/DatailsMovie.module.css?d0e9","components/DatailsMovie/DatailsMovie.jsx","pages/MovieDetails.jsx","resurces/resurses.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"link\":\"DatailsMovie_link__-sg-5\",\"container\":\"DatailsMovie_container__3rQxt\",\"movieTitle\":\"DatailsMovie_movieTitle__puqrp\",\"text\":\"DatailsMovie_text__VjhjJ\",\"textData\":\"DatailsMovie_textData__zHoV-\",\"textInfo\":\"DatailsMovie_textInfo__EFiOl\",\"blockInfo\":\"DatailsMovie_blockInfo__0Trqe\",\"addLink\":\"DatailsMovie_addLink__hCm9e\",\"itemDetail\":\"DatailsMovie_itemDetail__2r7Zi\",\"textRating\":\"DatailsMovie_textRating__iM9v7\"};","\nimport {FcRating} from 'react-icons/fc'\nimport { Link } from \"react-router-dom\";\nimport css from './DatailsMovie.module.css'\n    \nconst DatailsMovie = ({\n    title,\n    overview,\n    voteAverage,\n    url,\n    movieRelise,\n    backStap\n            }) => {\n\n       return (\n        <section className={css.container}>\n               <Link to={backStap.current} className={css.link}>&lt; Back to go</Link>\n               <h1 className={css.movieTitle}>{title} </h1>\n               <div className={css.blockInfo}>\n               <img src={url} alt={`poster${title}`} width={250} />\n                   <p className={`${css.text} ${css.textInfo}`}>{overview}\n                       <span  className={css.textData}>\n                           Release date: { movieRelise}\n                       </span>\n                   </p>\n                     <p className={css.textRating}><span>Rating:</span> <span>{ voteAverage} <FcRating/></span> </p>\n               </div>\n                     <ul className={css.itemDetail}>\n                <li className={css.link}><Link className={css.addLink} to='cast'>Cast</Link></li>\n                <li className={css.link}><Link className={css.addLink} to='reviews'>Reviews</Link></li> \n            </ul>\n        </section>\n    )\n}\nexport default DatailsMovie","import DatailsMovie from \"components/DatailsMovie/DatailsMovie\"\nimport { useRef } from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { Outlet, useLocation, useParams } from \"react-router-dom\";\nimport { toast } from \"react-toastify\";\nimport { getMovieDetails } from \"resurces/resurses\";\n\nconst defaultImg = 'https://ireland.apollo.olxcdn.com/v1/files/0iq0gb9ppip8-UA/image;s=1000x700';\n\nconst MovieDetails = () => {\n    const { id } = useParams();\n\n    const [isLoading, setIsLoading] = useState(false);\n    const [title, setTitle] = useState('');\n    const [overview, setOverview] = useState('');\n    const [voteAverage, setVoteAverage] = useState('');\n    const [posterImage, setPosterImage] = useState('');\n    const [movieRelise, setMovieRelise] = useState('');\n\n    const location = useLocation();\n\n    const backStap = useRef(location.state?.from??\"/\")\n\n    useEffect(() => {\n        if (!id) return;\n        addDateDatails(id )\n}, [id]);\n     async function addDateDatails(id) {\n         try {\n      setIsLoading(true);\n      const newData = await getMovieDetails(id);\n             const { title, overview, vote_average, poster_path, release_date\n } = newData;\n             setTitle(title);\n             setOverview(overview);\n             setVoteAverage(vote_average);\n             setPosterImage(poster_path);\n             setMovieRelise(release_date);\n             }\n    catch (error) {\n      toast.error(`API NOT FAUND: ${error.message}`)\n    } finally {setIsLoading(false)}\n  }\n  \n    const urlPoster = 'https://image.tmdb.org/t/p/w500';\n  const url = posterImage ? `${urlPoster}${posterImage}` : defaultImg;\n  \n    return (\n        <section>\n        <DatailsMovie\n                isLoading={isLoading}\n                title={title}\n                overview={overview}\n                voteAverage={voteAverage}\n                url={url}\n                movieRelise={movieRelise}\n                backStap={backStap}\n        />\n          <Outlet/>\n            </section>\n    )\n}\nexport default MovieDetails","import axios from 'axios';\nimport { toast } from 'react-toastify';\n\n\nconst KEY = 'b283a210ed534a6a364c9fa9b60e8619';\nconst BASE_URL = 'https://api.themoviedb.org/3';;\n\nexport async function getTrendingMovies(page) {\n    const url = `${BASE_URL}/trending/movie/day`\n    const options = {\n        params: {\n            api_key: KEY,\n        page: page},\n      \n    };\n    try {\n        const response = await axios(url, options);\n        const dataRespons = await response.data;\n        return dataRespons;\n    }\n    catch (error) {\n        toast.error(`API not faund: ${error.message}`)\n        throw new Error(error.message);\n    }\n}\n\nexport async function getMovieDetails(id) {\n    const url = `${BASE_URL}/movie/${id}`\n    const options = {\n        params: {\n            api_key: KEY,\n            movie_id: id,\n        },    \n    }\n    try {\n        const response = await axios(url, options);\n        const dataRespons = await response.data;\n        return dataRespons;\n    }\n    catch (error) {\n        toast.error(`API not faund: ${error.message}`)\n        throw new Error(error.message);\n    }\n};\n\nexport async function getCastAndReviews(id, getText) {\n    const url = `${BASE_URL}/movie/${id}/${getText}`\n    const options = {\n        params: {\n            api_key: KEY,\n            movie_id: id,\n        },    \n    }\n    try {\n        const response = await axios(url, options);\n        const dataRespons = await response.data;\n        // console.log('dataRespons: ', dataRespons);\n        return dataRespons;\n    }\n    catch (error) {\n        toast.error(`API not faund: ${error.message}`)\n        throw new Error(error.message);\n    }\n};\n\nexport async function serchMovies(serch) {\n    const url = `${BASE_URL}/search/movie`\n    const options = {\n        params: {\n            api_key: KEY,\n            query: serch,\n            },    \n    }\n    try {\n        const response = await axios(url, options);\n        const dataRespons = await response.data;\n        // console.log('dataRespons: ', dataRespons);\n        return dataRespons;\n    }\n    catch (error) {\n        toast.error(`API not faund: ${error.message}`)\n        throw new Error(error.message);\n    }\n}\n"],"names":["title","overview","voteAverage","url","movieRelise","backStap","className","css","Link","to","current","src","alt","width","id","useParams","useState","isLoading","setIsLoading","setTitle","setOverview","setVoteAverage","posterImage","setPosterImage","setMovieRelise","location","useLocation","useRef","state","from","getMovieDetails","newData","vote_average","poster_path","release_date","toast","message","useEffect","addDateDatails","KEY","BASE_URL","getTrendingMovies","page","options","params","api_key","axios","response","data","dataRespons","Error","movie_id","getCastAndReviews","getText","serchMovies","serch","query"],"sourceRoot":""}