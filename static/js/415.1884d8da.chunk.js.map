{"version":3,"file":"static/js/415.1884d8da.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-05-movies/./src/components/Button/Button.module.css?ce6f","components/Button/Button.jsx","webpack://goit-react-hw-05-movies/./src/components/MoviesGallery/MovieItem/MovieItem.module.css?a5e7","components/MoviesGallery/MovieItem/MovieItem.jsx","webpack://goit-react-hw-05-movies/./src/components/MoviesGallery/MoviesGallery.module.css?276e","components/MoviesGallery/MoviesGallery.jsx","pages/Home.jsx","resurces/resurses.js","../node_modules/nanoid/index.browser.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"Button\":\"Button_Button__Smq3v\"};","import css from './Button.module.css'\nimport PropTypes from 'prop-types';\nexport const Button = ({onClick}) => {\n    return (\n        <button  type='button' className={css.Button} onClick={onClick}>Load more</button>\n    )\n}\nButton.propTypes = {\n    onClick: PropTypes.func.isRequired,\n};","// extracted by mini-css-extract-plugin\nexport default {\"GalleryItem\":\"MovieItem_GalleryItem__tOTn7\",\"GalleryItem_image\":\"MovieItem_GalleryItem_image__GloLE\",\"movieTitle\":\"MovieItem_movieTitle__vvSk6\",\"movieRelise\":\"MovieItem_movieRelise__ElFcz\"};","import { Link, useLocation } from \"react-router-dom\";\nimport css from './MovieItem.module.css'\nconst defaultImg = 'https://ireland.apollo.olxcdn.com/v1/files/0iq0gb9ppip8-UA/image;s=1000x700';\n\nconst MovieItem = ({movie, alt}) => {\n    const { id, poster_path: posterImage, title, release_date} = movie;\n\n  const location = useLocation();\n  \n  \n    const urlPoster = 'https://image.tmdb.org/t/p/w500';\n    const url =  posterImage ? `${urlPoster}${posterImage}` : defaultImg;\n    return (\n      <li className={css.GalleryItem}> \n        \n        <Link  to={`/movies/${id}`} state={{ from: location }}>\n        <img className={css.GalleryItem_image} src={url} width={200} alt={alt} />\n        </Link>\n        <h2 className={css.movieTitle}>{title}</h2>\n        <p className={css.movieRelise}>Release date: <br/> {release_date }</p>\n    </li>\n    )\n}\nexport default MovieItem;","// extracted by mini-css-extract-plugin\nexport default {\"moviesGallery\":\"MoviesGallery_moviesGallery__2a3z1\",\"container\":\"MoviesGallery_container__p0OR5\"};","import { Button } from \"components/Button/Button\"\nimport { Loader } from \"components/Loader/Loader\";\nimport { nanoid } from \"nanoid\";\nimport MovieItem from \"./MovieItem/MovieItem\";\nimport css from './MoviesGallery.module.css'\n\n\nconst MoviesGallery = ({ results, alt, totalResults, clickInLoadMore, isLoading, querySearch }) => {\n    const showButton = results.length > 0 && results.length < totalResults;\n    const showPoster = Array.isArray(results) && results.length > 0;\n     return (\n        <section className={css.container}>\n             {showPoster && !querySearch && <h1>Popular movies today</h1>}\n             {querySearch&&showPoster&& <h2>Found movies on request <span>{querySearch}</span> : { totalResults} </h2>}\n            <ul className={css.moviesGallery}>\n            {showPoster&& results.map(movie => <MovieItem key={nanoid(10)} movie={movie} alt={ alt} />)}\n         </ul>\n         {isLoading && <Loader />}\n        {showButton &&\n        <Button\n          totalResults={totalResults}\n          onClick={clickInLoadMore} />}\n        </section>\n    )\n}\nexport default MoviesGallery","\n\nimport MoviesGallery from \"components/MoviesGallery/MoviesGallery\";\nimport { useState } from \"react\";\nimport { useEffect } from \"react\";\nimport { toast } from \"react-toastify\";\nimport { getTrendingMovies } from \"resurces/resurses\";\n\n\nconst Home = () => {\n    const [isLoading, setIsLoading] = useState(false);\n    const [page, setPage] = useState(1);\n    const [results, setResults] = useState([]);\n    const [totalResults, setTotalResults] = useState(0);\n   \n    useEffect(() => {\n      addData( page)\n    }, [page])\n\n     async function addData(page) {\n    try {\n      setIsLoading(true);\n      const newData = await getTrendingMovies(page);\n      if (newData.results === 0) {\n        toast.error('Movies not faund')\n        return;\n      }\n      setResults(prevResults => page === 1 ? newData.results : [...prevResults, ...newData.results]);\n      setTotalResults(newData.total_results);\n    } catch (error) {\n      toast.error(`API NOT FAUND: ${error.message}`)\n    } finally {setIsLoading(false)}\n    }\n    \nconst clickInLoadMore = () => setPage(prevState => prevState + 1);\n\n    return (\n      <section>\n        \n             <MoviesGallery\n                results={results}\n                alt={`poster movies ${results.title}`}\n                totalResults={totalResults}\n                clickInLoadMore={clickInLoadMore}\n                isLoading={isLoading}\n          />\n        </section>\n    )\n}\nexport default Home;","import axios from 'axios';\nimport { toast } from 'react-toastify';\n\n\nconst KEY = 'b283a210ed534a6a364c9fa9b60e8619';\nconst BASE_URL = 'https://api.themoviedb.org/3';;\n\nexport async function getTrendingMovies(page) {\n    const url = `${BASE_URL}/trending/movie/day`\n    const options = {\n        params: {\n            api_key: KEY,\n        page: page},\n      \n    };\n    try {\n        const response = await axios(url, options);\n        const dataRespons = await response.data;\n        return dataRespons;\n    }\n    catch (error) {\n        toast.error(`API not faund: ${error.message}`)\n        throw new Error(error.message);\n    }\n}\n\nexport async function getMovieDetails(id) {\n    const url = `${BASE_URL}/movie/${id}`\n    const options = {\n        params: {\n            api_key: KEY,\n            movie_id: id,\n        },    \n    }\n    try {\n        const response = await axios(url, options);\n        const dataRespons = await response.data;\n        return dataRespons;\n    }\n    catch (error) {\n        toast.error(`API not faund: ${error.message}`)\n        throw new Error(error.message);\n    }\n};\n\nexport async function getCastAndReviews(id, getText) {\n    const url = `${BASE_URL}/movie/${id}/${getText}`\n    const options = {\n        params: {\n            api_key: KEY,\n            movie_id: id,\n        },    \n    }\n    try {\n        const response = await axios(url, options);\n        const dataRespons = await response.data;\n        // console.log('dataRespons: ', dataRespons);\n        return dataRespons;\n    }\n    catch (error) {\n        toast.error(`API not faund: ${error.message}`)\n        throw new Error(error.message);\n    }\n};\n\nexport async function serchMovies(serch) {\n    const url = `${BASE_URL}/search/movie`\n    const options = {\n        params: {\n            api_key: KEY,\n            query: serch,\n            },    \n    }\n    try {\n        const response = await axios(url, options);\n        const dataRespons = await response.data;\n        // console.log('dataRespons: ', dataRespons);\n        return dataRespons;\n    }\n    catch (error) {\n        toast.error(`API not faund: ${error.message}`)\n        throw new Error(error.message);\n    }\n}\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["Button","onClick","type","className","css","movie","alt","id","posterImage","poster_path","title","release_date","location","useLocation","url","Link","to","state","from","src","width","results","totalResults","clickInLoadMore","isLoading","querySearch","showButton","length","showPoster","Array","isArray","map","nanoid","Loader","useState","setIsLoading","page","setPage","setResults","setTotalResults","getTrendingMovies","newData","toast","prevResults","total_results","message","useEffect","addData","prevState","KEY","BASE_URL","options","params","api_key","axios","response","data","dataRespons","Error","getMovieDetails","movie_id","getCastAndReviews","getText","serchMovies","serch","query","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}