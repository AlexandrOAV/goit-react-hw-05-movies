{"version":3,"file":"static/js/262.d89d8fd2.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-05-movies/./src/components/Cast/CastItem/CastItem.module.css?aa36","components/Cast/CastItem/CastItem.jsx","webpack://goit-react-hw-05-movies/./src/components/Cast/Cast.module.css?c9ee","components/Cast/Cast.jsx","resurces/resurses.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"headItem\":\"CastItem_headItem__-xsio\",\"text\":\"CastItem_text__REkqW\",\"itemRewiew\":\"CastItem_itemRewiew__b4Ph0\"};","import css from './CastItem.module.css'\nconst CastItem = ({ name, character, actorImage }) => {\n    const defaultImg = 'https://ireland.apollo.olxcdn.com/v1/files/0iq0gb9ppip8-UA/image;s=1000x700';\n    const urlPoster = 'https://image.tmdb.org/t/p/w500';\n    const url =  actorImage ? `${urlPoster}${actorImage}` :defaultImg ;\n   \n    return (\n        <li className={css.itemRewiew}>\n            <h2 className={css.headItem}>{name}</h2>\n            <img src={url} alt={name} width={100} />\n            <p className={css.text}>In the role:  {character}</p>            \n        </li>\n    )\n}\nexport default CastItem;","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Cast_container__iz+ye\",\"list\":\"Cast_list__GlWio\"};","import { Loader } from \"components/Loader/Loader\";\nimport { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { toast } from \"react-toastify\";\nimport { getCastAndReviews } from \"resurces/resurses\";\nimport CastItem from \"./CastItem/CastItem\";\nimport css from \"./Cast.module.css\"\nconst Cast = () => {\n    const { id } = useParams();\n    const [isLoading, setIsLoading] = useState(false);\n    const [cast, setCast] = useState([]);\n   \n    \n     useEffect(() => {\n        if (!id) return;\n        inActorArray(id )\n     }, [id]);   \n    \nasync function inActorArray(id) {\n         try {\n      setIsLoading(true);\n             const newData = await getCastAndReviews(id, 'credits');\n             setCast(newData.cast)\n            }\n    \n    catch (error) {\n      toast.error(`API NOT FAUND: ${error.message}`)\n    } finally {setIsLoading(false)}\n    }\n   \n    const showCast = Array.isArray(cast) && cast.length > 0;\n    \n    return (\n        <section className={css.container}>\n             {isLoading && <Loader />}\n            <h1>Cast</h1>\n            <ul className={css.list}>\n                {showCast&&\n                    cast.map(({ name, character, id, profile_path }) => \n                        <CastItem\n                            key={id}\n                            name={name}\n                            character={character}\n                            actorImage={profile_path} />\n                    )\n                }\n            </ul>\n        </section>\n    )\n}\nexport default Cast;","import axios from 'axios';\nimport { toast } from 'react-toastify';\n\n\nconst KEY = 'b283a210ed534a6a364c9fa9b60e8619';\nconst BASE_URL = 'https://api.themoviedb.org/3';;\n\nexport async function getTrendingMovies(page) {\n    const url = `${BASE_URL}/trending/movie/day`\n    const options = {\n        params: {\n            api_key: KEY,\n        page: page},\n      \n    };\n    try {\n        const response = await axios(url, options);\n        const dataRespons = await response.data;\n        return dataRespons;\n    }\n    catch (error) {\n        toast.error(`API not faund: ${error.message}`)\n        throw new Error(error.message);\n    }\n}\n\nexport async function getMovieDetails(id) {\n    const url = `${BASE_URL}/movie/${id}`\n    const options = {\n        params: {\n            api_key: KEY,\n            movie_id: id,\n        },    \n    }\n    try {\n        const response = await axios(url, options);\n        const dataRespons = await response.data;\n        return dataRespons;\n    }\n    catch (error) {\n        toast.error(`API not faund: ${error.message}`)\n        throw new Error(error.message);\n    }\n};\n\nexport async function getCastAndReviews(id, getText) {\n    const url = `${BASE_URL}/movie/${id}/${getText}`\n    const options = {\n        params: {\n            api_key: KEY,\n            movie_id: id,\n        },    \n    }\n    try {\n        const response = await axios(url, options);\n        const dataRespons = await response.data;\n        // console.log('dataRespons: ', dataRespons);\n        return dataRespons;\n    }\n    catch (error) {\n        toast.error(`API not faund: ${error.message}`)\n        throw new Error(error.message);\n    }\n};\n\nexport async function serchMovies(serch) {\n    const url = `${BASE_URL}/search/movie`\n    const options = {\n        params: {\n            api_key: KEY,\n            query: serch,\n            },    \n    }\n    try {\n        const response = await axios(url, options);\n        const dataRespons = await response.data;\n        // console.log('dataRespons: ', dataRespons);\n        return dataRespons;\n    }\n    catch (error) {\n        toast.error(`API not faund: ${error.message}`)\n        throw new Error(error.message);\n    }\n}\n"],"names":["name","character","actorImage","url","className","css","src","alt","width","id","useParams","useState","isLoading","setIsLoading","cast","setCast","getCastAndReviews","newData","toast","message","useEffect","inActorArray","showCast","Array","isArray","length","Loader","map","profile_path","KEY","BASE_URL","getTrendingMovies","page","options","params","api_key","axios","response","data","dataRespons","Error","getMovieDetails","movie_id","getText","serchMovies","serch","query"],"sourceRoot":""}